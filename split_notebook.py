aw#!/usr/bin/env python3
"""
Split Notebook Script for Symptom Analyzer

This script creates a Jupyter notebook focused on user input for symptoms and disease prediction.
"""

import json
import os

def create_interactive_notebook():
    """Create a new interactive notebook with cells for user input and prediction"""
    notebook = {
        "cells": [
            # Title and introduction
            {
                "cell_type": "markdown",
                "metadata": {},
                "source": [
                    "# Interactive Symptom Analyzer\n",
                    "\n",
                    "This notebook allows you to input symptoms and predict possible diseases using machine learning.\n",
                    "\n",
                    "## Usage\n",
                    "1. Run all cells in sequence\n",
                    "2. Enter your symptoms in the input field\n",
                    "3. Get disease predictions based on your symptoms\n"
                ]
            },
            
            # Import libraries
            {
                "cell_type": "code",
                "execution_count": None,
                "metadata": {},
                "outputs": [],
                "source": [
                    "import pandas as pd\n",
                    "import numpy as np\n",
                    "import os\n",
                    "import re\n",
                    "import matplotlib.pyplot as plt\n",
                    "import seaborn as sns\n",
                    "\n",
                    "# Suppress warnings\n",
                    "import warnings\n",
                    "warnings.filterwarnings('ignore')\n",
                    "\n",
                    "# For interactive widgets\n",
                    "from ipywidgets import widgets\n",
                    "from IPython.display import display\n",
                    "\n",
                    "# ML libraries\n",
                    "from sklearn.model_selection import train_test_split\n",
                    "from sklearn.feature_extraction.text import TfidfVectorizer\n",
                    "from sklearn.naive_bayes import MultinomialNB\n",
                    "from sklearn.ensemble import RandomForestClassifier\n",
                    "from sklearn.metrics import accuracy_score\n",
                    "from sklearn.preprocessing import LabelEncoder\n",
                    "\n",
                    "print(\"Libraries imported successfully!\")"
                ]
            },
            
            # Dataset creation
            {
                "cell_type": "code",
                "execution_count": None,
                "metadata": {},
                "outputs": [],
                "source": [
                    "# Define stopwords for text processing\n",
                    "STOPWORDS = {\n",
                    "    'a', 'an', 'the', 'and', 'but', 'or', 'if', 'because', 'as', 'until', 'while',\n",
                    "    'of', 'at', 'by', 'for', 'with', 'about', 'against', 'between', 'into', 'through',\n",
                    "    'during', 'before', 'after', 'above', 'below', 'to', 'from', 'up', 'down', 'in',\n",
                    "    'out', 'on', 'off', 'over', 'under', 'again', 'further', 'then', 'once', 'here',\n",
                    "    'there', 'when', 'where', 'why', 'how', 'all', 'any', 'both', 'each', 'few', 'more',\n",
                    "    'most', 'other', 'some', 'such', 'no', 'nor', 'not', 'only', 'own', 'same', 'so'\n",
                    "}\n",
                    "\n",
                    "def preprocess_text(text):\n",
                    "    \"\"\"Simplified text preprocessing without relying on NLTK\"\"\"\n",
                    "    # Convert to lowercase\n",
                    "    text = text.lower()\n",
                    "    \n",
                    "    # Replace punctuation with spaces\n",
                    "    text = re.sub(r'[^\\w\\s]', ' ', text)\n",
                    "    \n",
                    "    # Tokenize by splitting on whitespace\n",
                    "    tokens = text.split()\n",
                    "    \n",
                    "    # Remove stopwords\n",
                    "    tokens = [token for token in tokens if token not in STOPWORDS]\n",
                    "    \n",
                    "    # Join tokens back into a string\n",
                    "    processed_text = ' '.join(tokens)\n",
                    "    \n",
                    "    return processed_text\n",
                    "\n",
                    "def create_sample_dataset():\n",
                    "    \"\"\"Create a sample dataset of symptoms and diseases\"\"\"\n",
                    "    print(\"Creating sample dataset...\")\n",
                    "    \n",
                    "    # Create data directory if it doesn't exist\n",
                    "    os.makedirs('data', exist_ok=True)\n",
                    "    \n",
                    "    # Sample data with symptoms and diseases\n",
                    "    data = \"\"\"Symptoms,Disease\n",
                    "fever headache cough,Common Cold\n",
                    "mild fever runny nose sore throat,Common Cold\n",
                    "cough congestion sneezing,Common Cold\n",
                    "headache sore throat mild fever,Common Cold\n",
                    "fatigue cough runny nose,Common Cold\n",
                    "high fever severe headache stiff neck light sensitivity,Meningitis\n",
                    "stiff neck fever vomiting confusion,Meningitis\n",
                    "headache fever stiff neck rash,Meningitis\n",
                    "light sensitivity headache fever neck pain,Meningitis\n",
                    "confusion fever stiff neck headache,Meningitis\n",
                    "chest pain shortness of breath sweating,Heart Attack\n",
                    "pain radiating to arm jaw neck,Heart Attack\n",
                    "chest pressure nausea cold sweat,Heart Attack\n",
                    "shortness of breath chest discomfort fatigue,Heart Attack\n",
                    "chest tightness dizziness anxiety,Heart Attack\n",
                    "fatigue weight loss night sweats cough,Tuberculosis\n",
                    "coughing blood chest pain fever,Tuberculosis\n",
                    "fatigue persistent cough weight loss,Tuberculosis\n",
                    "night sweats fever persistent cough,Tuberculosis\n",
                    "chest pain fatigue coughing blood,Tuberculosis\n",
                    "abdominal pain diarrhea nausea vomiting,Gastroenteritis\n",
                    "stomach cramps watery diarrhea,Gastroenteritis\n",
                    "nausea vomiting fever diarrhea,Gastroenteritis\n",
                    "abdominal pain fever vomiting,Gastroenteritis\n",
                    "diarrhea dehydration stomach pain,Gastroenteritis\n",
                    "high fever fatigue sore throat swollen lymph glands,Mononucleosis\n",
                    "swollen lymph nodes fatigue fever,Mononucleosis\n",
                    "extreme fatigue sore throat headache,Mononucleosis\n",
                    "fever swollen spleen fatigue,Mononucleosis\n",
                    "sore throat fever fatigue rash,Mononucleosis\n",
                    "fever rash joint pain muscle pain,Dengue\n",
                    "high fever headache pain behind eyes,Dengue\n",
                    "muscle joint pain rash vomiting,Dengue\n",
                    "fever rash fatigue bleeding gums,Dengue\n",
                    "severe headache pain behind eyes fever,Dengue\n",
                    "frequent urination excessive thirst hunger weight loss,Diabetes\n",
                    "increased thirst frequent urination fatigue,Diabetes\n",
                    "blurry vision slow healing wounds,Diabetes\n",
                    "weight loss extreme hunger fatigue,Diabetes\n",
                    "tingling hands feet excessive thirst,Diabetes\n",
                    "wheezing shortness of breath chest tightness coughing,Asthma\n",
                    "shortness of breath wheezing coughing,Asthma\n",
                    "chest tightness difficulty breathing wheezing,Asthma\n",
                    "coughing at night shortness of breath,Asthma\n",
                    "exercise induced breathing difficulty,Asthma\"\"\"\n",
                    "    \n",
                    "    # Write to CSV file\n",
                    "    with open('data/symptom_disease.csv', 'w') as f:\n",
                    "        f.write(data)\n",
                    "    \n",
                    "    # Load the dataset\n",
                    "    df = pd.read_csv('data/symptom_disease.csv')\n",
                    "    df['Processed_Symptoms'] = df['Symptoms'].apply(preprocess_text)\n",
                    "    \n",
                    "    print(f\"Dataset created with {len(df)} samples and {df['Disease'].nunique()} diseases\")\n",
                    "    \n",
                    "    # Display disease distribution\n",
                    "    plt.figure(figsize=(10, 6))\n",
                    "    sns.countplot(y='Disease', data=df, order=df['Disease'].value_counts().index)\n",
                    "    plt.title('Distribution of Diseases in Dataset')\n",
                    "    plt.tight_layout()\n",
                    "    plt.show()\n",
                    "    \n",
                    "    return df\n",
                    "\n",
                    "# Create dataset\n",
                    "df = create_sample_dataset()"
                ]
            },
            
            # Train models
            {
                "cell_type": "code",
                "execution_count": None,
                "metadata": {},
                "outputs": [],
                "source": [
                    "def train_models(df):\n",
                    "    \"\"\"Train machine learning models on the symptom data\"\"\"\n",
                    "    print(\"Training disease prediction models...\")\n",
                    "    \n",
                    "    # Encode disease labels\n",
                    "    le = LabelEncoder()\n",
                    "    df['Disease_Encoded'] = le.fit_transform(df['Disease'])\n",
                    "    \n",
                    "    # Prepare features and targets\n",
                    "    X = df['Processed_Symptoms']\n",
                    "    y = df['Disease_Encoded']\n",
                    "    \n",
                    "    # Split into training and testing sets\n",
                    "    X_train, X_test, y_train, y_test = train_test_split(\n",
                    "        X, y, test_size=0.2, random_state=42, stratify=y\n",
                    "    )\n",
                    "    \n",
                    "    # Vectorize text features\n",
                    "    vectorizer = TfidfVectorizer(max_features=100)\n",
                    "    X_train_tfidf = vectorizer.fit_transform(X_train)\n",
                    "    X_test_tfidf = vectorizer.transform(X_test)\n",
                    "    \n",
                    "    # Train Naive Bayes model\n",
                    "    print(\"Training Naive Bayes model...\")\n",
                    "    nb_model = MultinomialNB(alpha=0.5)\n",
                    "    nb_model.fit(X_train_tfidf, y_train)\n",
                    "    nb_pred = nb_model.predict(X_test_tfidf)\n",
                    "    nb_acc = accuracy_score(y_test, nb_pred)\n",
                    "    print(f\"Naive Bayes accuracy: {nb_acc:.2%}\")\n",
                    "    \n",
                    "    # Train Random Forest model\n",
                    "    print(\"Training Random Forest model...\")\n",
                    "    rf_model = RandomForestClassifier(\n",
                    "        n_estimators=50, \n",
                    "        max_depth=5, \n",
                    "        random_state=42, \n",
                    "        class_weight='balanced'\n",
                    "    )\n",
                    "    rf_model.fit(X_train_tfidf, y_train)\n",
                    "    rf_pred = rf_model.predict(X_test_tfidf)\n",
                    "    rf_acc = accuracy_score(y_test, rf_pred)\n",
                    "    print(f\"Random Forest accuracy: {rf_acc:.2%}\")\n",
                    "    \n",
                    "    # Compare model performances\n",
                    "    models = ['Naive Bayes', 'Random Forest']\n",
                    "    accuracies = [nb_acc, rf_acc]\n",
                    "    \n",
                    "    plt.figure(figsize=(8, 5))\n",
                    "    bars = plt.bar(models, accuracies, color=['skyblue', 'lightgreen'])\n",
                    "    plt.title('Model Accuracy Comparison')\n",
                    "    plt.ylabel('Accuracy')\n",
                    "    plt.ylim(0, 1)\n",
                    "    \n",
                    "    # Add accuracy values on top of bars\n",
                    "    for bar, acc in zip(bars, accuracies):\n",
                    "        plt.text(bar.get_x() + bar.get_width()/2, acc + 0.01, \n",
                    "                 f'{acc:.2%}', ha='center')\n",
                    "    \n",
                    "    plt.tight_layout()\n",
                    "    plt.show()\n",
                    "    \n",
                    "    # Determine best model\n",
                    "    best_model = 'rf' if rf_acc >= nb_acc else 'nb'\n",
                    "    print(f\"Best model: {'Random Forest' if best_model == 'rf' else 'Naive Bayes'}\")\n",
                    "    \n",
                    "    # Return trained models and other objects\n",
                    "    return {\n",
                    "        'vectorizer': vectorizer,\n",
                    "        'label_encoder': le,\n",
                    "        'naive_bayes': nb_model,\n",
                    "        'random_forest': rf_model,\n",
                    "        'best_model': best_model\n",
                    "    }\n",
                    "\n",
                    "# Train the models\n",
                    "models = train_models(df)"
                ]
            },
            
            # Prediction function
            {
                "cell_type": "code",
                "execution_count": None,
    "metadata": {},
                "outputs": [],
    "source": [
                    "def predict_disease(symptoms, model_type=None):\n",
                    "    \"\"\"Predict disease based on symptoms\"\"\"\n",
                    "    # Use the best model if not specified\n",
                    "    if model_type is None:\n",
                    "        model_type = models['best_model']\n",
                    "    \n",
                    "    # Preprocess the input symptoms\n",
                    "    processed_symptoms = preprocess_text(symptoms)\n",
                    "    print(f\"Input symptoms: {symptoms}\")\n",
                    "    print(f\"Processed symptoms: {processed_symptoms}\")\n",
                    "    \n",
                    "    # Vectorize the processed symptoms\n",
                    "    symptoms_tfidf = models['vectorizer'].transform([processed_symptoms])\n",
                    "    \n",
                    "    # Make prediction with the selected model\n",
                    "    if model_type == 'nb':\n",
                    "        prediction = models['naive_bayes'].predict(symptoms_tfidf)\n",
                    "        probabilities = models['naive_bayes'].predict_proba(symptoms_tfidf)[0]\n",
                    "        model_name = \"Naive Bayes\"\n",
                    "    else:  # Default to Random Forest\n",
                    "        prediction = models['random_forest'].predict(symptoms_tfidf)\n",
                    "        probabilities = models['random_forest'].predict_proba(symptoms_tfidf)[0]\n",
                    "        model_name = \"Random Forest\"\n",
                    "    \n",
                    "    # Get the predicted disease name\n",
                    "    predicted_disease = models['label_encoder'].inverse_transform(prediction)[0]\n",
                    "    \n",
                    "    # Get the top 3 predictions with probabilities\n",
                    "    top_indices = np.argsort(probabilities)[-3:][::-1]\n",
                    "    top_probabilities = probabilities[top_indices]\n",
                    "    top_diseases = models['label_encoder'].inverse_transform(top_indices)\n",
                    "    \n",
                    "    # Display the results\n",
                    "    print(f\"\\nModel used: {model_name}\")\n",
                    "    print(f\"\\nPredicted Disease: {predicted_disease}\")\n",
                    "    \n",
                    "    print(\"\\nTop 3 Possible Diseases:\")\n",
                    "    for disease, prob in zip(top_diseases, top_probabilities):\n",
                    "        confidence = \"High\" if prob > 0.7 else \"Medium\" if prob > 0.4 else \"Low\"\n",
                    "        print(f\"- {disease}: {prob*100:.2f}% ({confidence} confidence)\")\n",
                    "    \n",
                    "    # Visualize the results\n",
                    "    plt.figure(figsize=(10, 6))\n",
                    "    colors = ['#3498db', '#95a5a6', '#95a5a6']  # Highlight the first one\n",
                    "    bars = plt.bar(range(len(top_diseases)), [p*100 for p in top_probabilities], color=colors)\n",
                    "    plt.xlabel('Disease')\n",
                    "    plt.ylabel('Probability (%)')\n",
                    "    plt.title('Disease Prediction Results')\n",
                    "    plt.xticks(range(len(top_diseases)), top_diseases, rotation=30)\n",
                    "    plt.ylim(0, 100)\n",
                    "    \n",
                    "    # Add percentage values on top of bars\n",
                    "    for bar, prob in zip(bars, top_probabilities):\n",
                    "        height = bar.get_height()\n",
                    "        plt.text(bar.get_x() + bar.get_width()/2, height + 1, \n",
                    "                 f'{prob*100:.1f}%', ha='center')\n",
                    "    \n",
                    "    plt.tight_layout()\n",
                    "    plt.show()\n",
                    "    \n",
                    "    return predicted_disease\n",
                    "\n",
                    "# Test the prediction function with a simple example\n",
                    "print(\"Testing prediction function with example symptoms...\")\n",
                    "predict_disease(\"fever headache cough\")"
                ]
            },
            
            # Interactive UI
            {
                "cell_type": "code",
                "execution_count": None,
        "metadata": {},
                "outputs": [],
        "source": [
                    "def create_interactive_ui():\n",
                    "    \"\"\"Create an interactive UI for symptom input\"\"\"\n",
                    "    # Create widgets\n",
                    "    symptoms_input = widgets.Textarea(\n",
                    "        value='',\n",
                    "        placeholder='Enter symptoms separated by spaces (e.g., fever headache cough)',\n",
                    "        description='Symptoms:',\n",
                    "        disabled=False,\n",
                    "        layout=widgets.Layout(width='80%', height='100px')\n",
                    "    )\n",
                    "    \n",
                    "    model_dropdown = widgets.Dropdown(\n",
                    "        options=[\n",
                    "            ('Best Model (Auto)', 'auto'),\n",
                    "            ('Random Forest', 'rf'),\n",
                    "            ('Naive Bayes', 'nb')\n",
                    "        ],\n",
                    "        value='auto',\n",
                    "        description='Model:',\n",
                    "        disabled=False,\n",
                    "    )\n",
                    "    \n",
                    "    analyze_button = widgets.Button(\n",
                    "        description='Analyze Symptoms',\n",
                    "        disabled=False,\n",
                    "        button_style='success',\n",
                    "        tooltip='Click to analyze symptoms',\n",
                    "        icon='check'\n",
                    "    )\n",
                    "    \n",
                    "    output = widgets.Output()\n",
                    "    \n",
                    "    # Example symptoms for quick selection\n",
                    "    example_symptoms = [\n",
                    "        'fever headache cough runny nose',\n",
                    "        'chest pain shortness of breath pain in arm',\n",
                    "        'stiff neck fever headache light sensitivity',\n",
                    "        'fatigue weight loss night sweats cough',\n",
                    "        'abdominal pain diarrhea nausea vomiting'\n",
                    "    ]\n",
                    "    \n",
                    "    example_buttons = [widgets.Button(description=f\"Example {i+1}\") for i in range(len(example_symptoms))]\n",
                    "    \n",
                    "    # Handle analyze button click\n",
                    "    def on_analyze_click(b):\n",
                    "        with output:\n",
                    "            output.clear_output()\n",
                    "            if not symptoms_input.value.strip():\n",
                    "                print(\"Please enter symptoms first.\")\n",
                    "                return\n",
                    "            \n",
                    "            # Get the selected model\n",
                    "            model = model_dropdown.value\n",
                    "            if model == 'auto':\n",
                    "                model = models['best_model']\n",
                    "            \n",
                    "            # Predict disease\n",
                    "            predict_disease(symptoms_input.value, model_type=model)\n",
                    "    \n",
                    "    analyze_button.on_click(on_analyze_click)\n",
                    "    \n",
                    "    # Handle example button clicks\n",
                    "    def create_example_handler(example):\n",
                    "        def handler(b):\n",
                    "            symptoms_input.value = example\n",
                    "        return handler\n",
                    "    \n",
                    "    for i, button in enumerate(example_buttons):\n",
                    "        button.on_click(create_example_handler(example_symptoms[i]))\n",
                    "    \n",
                    "    # Create layout\n",
                    "    examples_box = widgets.HBox(example_buttons)\n",
                    "    input_box = widgets.VBox([\n",
                    "        widgets.HTML(value=\"<h3>Enter Symptoms</h3>\"),\n",
                    "        symptoms_input,\n",
                    "        widgets.HBox([model_dropdown, analyze_button]),\n",
                    "        widgets.HTML(value=\"<h4>Or try an example:</h4>\"),\n",
                    "        examples_box\n",
                    "    ])\n",
                    "    \n",
                    "    # Display the UI\n",
                    "    display(widgets.VBox([input_box, output]))\n",
                    "    \n",
                    "    print(\"Use the form above to enter symptoms and get predictions.\")\n",
                    "\n",
                    "# Create and display the interactive UI\n",
                    "create_interactive_ui()"
                ]
            },
            
            # Manual input option
            {
            "cell_type": "code",
            "execution_count": None,
            "metadata": {},
            "outputs": [],
                "source": [
                    "# Alternative: Enter symptoms directly here if widgets aren't working\n",
                    "symptoms = \"\" # Enter your symptoms here (e.g., \"fever headache cough\")\n",
                    "\n",
                    "if symptoms:\n",
                    "    predict_disease(symptoms)\n",
                    "else:\n",
                    "    print(\"Enter your symptoms in the 'symptoms' variable above and run this cell again.\")"
                ]
            }
        ],
        "metadata": {
            "kernelspec": {
                "display_name": "Python 3",
                "language": "python",
                "name": "python3"
            },
            "language_info": {
                "codemirror_mode": {
                    "name": "ipython",
                    "version": 3
                },
                "file_extension": ".py",
                "mimetype": "text/x-python",
                "name": "python",
                "nbconvert_exporter": "python",
                "pygments_lexer": "ipython3",
                "version": "3.9.0"
            }
        },
        "nbformat": 4,
        "nbformat_minor": 5
    }
    
    return notebook

def main():
    output_file = "symptom_interactive.ipynb"
    
    # Create the interactive notebook
    notebook = create_interactive_notebook()
    
    # Write to file
    with open(output_file, "w") as f:
        json.dump(notebook, f, indent=2)
    
    print(f"Interactive notebook created: {output_file}")
    print("Open it in Jupyter to use the symptom analyzer.")

if __name__ == "__main__":
    main()